{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactTable from 'react-table-v6';\nimport { Row, Col, Card, CardHeader, CardTitle, CardBody, Button, Table, Input, FormGroup } from 'reactstrap';\nimport { getReports } from '../../Utlis/get';\nimport Modal from '../../components/Modal/modal';\nimport Select from \"react-select\";\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nvar content = function content() {\n  var _React$useState = React.useState({\n    data: [],\n    loading: false,\n    filter: \"\",\n    valfilter: \"\",\n    typeValFilter: \"text\",\n    query: []\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      modal = _React$useState4[0],\n      setModal = _React$useState4[1];\n\n  React.useEffect(function () {\n    return function () {\n      setState(_objectSpread({}, state, {\n        data: []\n      }));\n    };\n  }, []);\n  var status = {\n    0: \"INACTIVO\",\n    1: \"ACTIVO\"\n  };\n  var reportS = {\n    0: \"PENDIENTE\",\n    1: \"APROBADO\",\n    2: \"RECHAZADO\",\n    3: \"FINALIZADO\"\n  };\n  var columns = [{\n    Header: 'Tipo de Evento',\n    accessor: 'TypeReport'\n  }, {\n    Header: 'Estado',\n    accessor: 'Status'\n  }, {\n    Header: 'Usuario Visador',\n    accessor: 'AdminUser'\n  }, {\n    Header: function Header(props) {\n      return __jsx(\"center\", null, \"Fecha de evento\");\n    },\n    accessor: \"Date\"\n  }];\n  var optionFilter = [{\n    value: \"@\",\n    label: \"Seleccione\",\n    isDisabled: true\n  }, {\n    value: \"id\",\n    label: \"Numero de registro\",\n    type: \"number\"\n  }, {\n    value: \"type_reports_id\",\n    label: \"Tipo de evento\",\n    type: \"number\"\n  }, {\n    value: \"users_id\",\n    label: \"Usuario\",\n    type: \"number\"\n  }, {\n    value: \"status\",\n    label: \"Estado\",\n    type: \"number\"\n  }, {\n    value: \"admin_users_id\",\n    label: \"Funcionario\",\n    type: \"number\"\n  }, {\n    value: \"date_from\",\n    label: \"Fecha inicial\",\n    type: \"date\"\n  }, {\n    value: \"date_to\",\n    label: \"Fecha final\",\n    type: \"date\"\n  }];\n\n  var getdata = function getdata() {\n    setState(_objectSpread({}, state, {\n      loading: true\n    }));\n    var query = {};\n    state.query.map(function (elem) {\n      var obj = Object.entries(elem)[0];\n      var type = optionFilter.filter(function (of) {\n        return of.value === obj[0];\n      })[0];\n      var val = obj[1];\n      if (type.type === \"number\") val = parseInt(val);\n      if (type.type === \"date\") val = val + \" 00:00:00\";\n      query[obj[0]] = val;\n    });\n    getReports(query).then(function (elem) {\n      if (elem !== undefined && elem.data.reports !== undefined) {\n        var newData = [];\n        elem.data.reports.map(function (e) {\n          e['Date'] = new Date(e.Time).toLocaleDateString();\n          e['Status'] = reportS[e.Status];\n          newData.push(e);\n        });\n        setState(_objectSpread({}, state, {\n          data: newData,\n          loading: false\n        }));\n        setModal(false);\n      } else {\n        setState(_objectSpread({}, state, {\n          data: [],\n          loading: false\n        }));\n        setModal(false);\n      }\n    });\n  };\n\n  var report = function report(type) {\n    if (type === \"E\") {\n      alert(\"reporte en proceso...\");\n    } else {\n      alert(\"reporte en proceso...\");\n    }\n  };\n\n  var query = function query() {\n    var filter = state.filter,\n        valfilter = state.valfilter;\n\n    if (valfilter !== undefined && valfilter !== \"\") {\n      setState(_objectSpread({}, state, {\n        query: [].concat(_toConsumableArray(state.query), [_defineProperty({}, filter.value, valfilter)]),\n        valfilter: \"\",\n        typeValFilter: \"text\",\n        filter: {}\n      }));\n    }\n  };\n\n  var queryDelete = function queryDelete(index) {\n    var arr = state.query;\n    var i = arr.indexOf(index);\n    arr.splice(i, 1);\n    setState(_objectSpread({}, state, {\n      query: arr\n    }));\n  };\n\n  var getFilter = function getFilter() {\n    var trTable = function trTable() {\n      return state.query.map(function (elem, i) {\n        var objet = Object.entries(elem)[0];\n        var label = optionFilter.filter(function (of) {\n          return of.value === objet[0];\n        });\n        return __jsx(\"tr\", {\n          key: \"tr_\" + i\n        }, __jsx(\"td\", null, label[0].label), __jsx(\"td\", {\n          className: \"text-right\"\n        }, objet[1]), __jsx(\"td\", {\n          className: \"text-right\"\n        }, __jsx(Button, {\n          className: \"btn-round\",\n          color: \"danger\",\n          size: \"sm\",\n          onClick: function onClick() {\n            queryDelete(i);\n          }\n        }, __jsx(\"i\", {\n          className: \"tim-icons icon-simple-remove\"\n        }))));\n      });\n    };\n\n    return __jsx(React.Fragment, null, __jsx(Row, null, __jsx(Col, {\n      xs: 5\n    }, __jsx(Select, {\n      className: \"react-select info\",\n      classNamePrefix: \"react-select\",\n      name: \"fiterSelect\",\n      value: state.filter || \"\",\n      onChange: function onChange(value) {\n        return setState(_objectSpread({}, state, {\n          filter: value,\n          typeValFilter: value.type,\n          valfilter: \"\"\n        }));\n      },\n      options: optionFilter || \"\",\n      placeholder: \"Filtrar por ...\"\n    })), __jsx(Col, {\n      xs: 3\n    }, __jsx(FormGroup, {\n      className: \"has-info\"\n    }, __jsx(Input, {\n      className: \"info\",\n      type: state.typeValFilter,\n      placeholder: \"Valor\",\n      value: state.valfilter || \"\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          valfilter: e.target.value\n        }));\n      }\n    }))), __jsx(Col, {\n      xs: 3\n    }, __jsx(Button, {\n      className: \"btn-round\",\n      color: \"info\",\n      size: \"sm\",\n      onClick: function onClick() {\n        query();\n      }\n    }, __jsx(\"i\", {\n      className: \"tim-icons icon-simple-add\"\n    }), \" Agregar\")), __jsx(\"hr\", null), __jsx(Col, {\n      xs: 12\n    }, __jsx(Table, {\n      responsive: true\n    }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Filtro\"), __jsx(\"th\", {\n      className: \"text-right\"\n    }, \"Valor\"), __jsx(\"th\", {\n      className: \"text-right\"\n    }))), __jsx(\"tbody\", null, trTable()))), __jsx(Col, {\n      xs: 12\n    }, __jsx(\"center\", null, __jsx(Button, {\n      className: \"btn-round\",\n      color: \"success\",\n      size: \"lg\",\n      onClick: function onClick() {\n        getdata();\n      }\n    }, __jsx(\"i\", {\n      className: \"tim-icons icon-send\"\n    }), \" Aplicar\")))));\n  };\n\n  var getTable = function getTable() {\n    return __jsx(Table, {\n      id: \"excel\"\n    }, __jsx(\"thead\", {\n      key: \"report_head\"\n    }, __jsx(\"tr\", {\n      key: \"header\"\n    }, __jsx(\"th\", null, \"Tipo de Evento\"), __jsx(\"th\", null, \"Estado\"), __jsx(\"th\", null, \"Usuario visador\"), __jsx(\"th\", null, \"Fecha de evento\"))), __jsx(\"tbody\", {\n      key: \"report_body\"\n    }, state.data.map(function (elem, i) {\n      return __jsx(\"tr\", {\n        key: \"body_tr_\" + i\n      }, columns.map(function (header, m) {\n        return __jsx(\"td\", {\n          key: \"body_td_\" + i + m\n        }, elem[header.accessor]);\n      }));\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    md: 12\n  }, __jsx(Card, null, __jsx(CardHeader, null, __jsx(Row, null, __jsx(Col, {\n    xs: 3\n  }, __jsx(CardTitle, {\n    tag: \"h3\"\n  }, \"Consulta de sistema\")), __jsx(Col, {\n    xs: 9,\n    className: \"text-right\"\n  }, __jsx(ReactHTMLTableToExcel, {\n    table: \"excel\",\n    filename: \"Report\",\n    sheet: \"page\",\n    className: \"btn-round btn btn-success btn-sm\",\n    buttonText: \"Excel\"\n  }), __jsx(Button, {\n    className: \"btn-round\",\n    color: \"danger\",\n    size: \"sm\",\n    onClick: function onClick() {\n      report(\"P\");\n    },\n    disabled: true\n  }, __jsx(\"i\", {\n    className: \"fa fa-user\"\n  }), \"Pdf\"), __jsx(Button, {\n    className: \"btn-round\",\n    color: \"info\",\n    size: \"sm\",\n    onClick: function onClick() {\n      setModal(true);\n    }\n  }, __jsx(\"i\", {\n    className: \"fa fa-user\"\n  }), \"Filtrar\")))), __jsx(CardBody, null, __jsx(ReactTable, {\n    columns: columns,\n    data: state.data,\n    loading: state.loading,\n    defaultPageSize: 10,\n    sortable: false,\n    resizable: false,\n    className: \"-striped -highlight\",\n    onFetchData: function onFetchData(state, instance) {\n      return getdata(state);\n    }\n  }))))), __jsx(Modal, {\n    modal: modal,\n    setModal: setModal,\n    title: \"Filtrar\",\n    size: \"lg\"\n  }, getFilter())), __jsx(\"div\", {\n    style: {\n      display: \"none\"\n    }\n  }, getTable()));\n};\n\nexport default content;","map":null,"metadata":{},"sourceType":"module"}