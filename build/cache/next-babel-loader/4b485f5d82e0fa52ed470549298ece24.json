{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/html/Via-Dashboard/via40-dashboard/context/global.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nexport var ContextOne = React.createContext();\nexport var initialState = {\n  load: true\n};\nexport var reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n\n    case \"stop-load\":\n      return _objectSpread({}, state, {\n        load: false\n      });\n\n    case \"start-load\":\n      return _objectSpread({}, state, {\n        load: true\n      });\n  }\n};\nexport function ContextOneProvider(props) {\n  var _React$useReducer = React.useReducer(reducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var value = {\n    state: state,\n    dispatch: dispatch\n  };\n  return __jsx(ContextOne.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, props.children);\n}\nexport var ContextOneConsumer = ContextOne.Consumer;\n\nvar Info = function Info() {\n  return \"this file found to controller general state\";\n};\n\nexport default Info;","map":{"version":3,"sources":["/var/www/html/Via-Dashboard/via40-dashboard/context/global.jsx"],"names":["React","ContextOne","createContext","initialState","load","reducer","state","action","type","ContextOneProvider","props","useReducer","dispatch","value","children","ContextOneConsumer","Consumer","Info"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAIC,UAAU,GAAGD,KAAK,CAACE,aAAN,EAAjB;AAEP,OAAO,IAAIC,YAAY,GAAG;AACtBC,EAAAA,IAAI,EAAE;AADgB,CAAnB;AAIP,OAAO,IAAIC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,OAAL;AACI,aAAOL,YAAP;;AACJ,SAAK,WAAL;AACI,+BAAYG,KAAZ;AAAmBF,QAAAA,IAAI,EAAE;AAAzB;;AACJ,SAAK,YAAL;AACI,+BAAYE,KAAZ;AAAmBF,QAAAA,IAAI,EAAE;AAAzB;AANR;AAQH,CATM;AAWP,OAAO,SAASK,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,0BACdV,KAAK,CAACW,UAAN,CAAiBN,OAAjB,EAA0BF,YAA1B,CADc;AAAA;AAAA,MACjCG,KADiC;AAAA,MAC1BM,QAD0B;;AAEtC,MAAIC,KAAK,GAAG;AAAEP,IAAAA,KAAK,EAALA,KAAF;AAASM,IAAAA,QAAQ,EAARA;AAAT,GAAZ;AACA,SACI,MAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCH,KAAK,CAACI,QAA1C,CADJ;AAGH;AAED,OAAO,IAAIC,kBAAkB,GAAGd,UAAU,CAACe,QAApC;;AAEP,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,SAAO,6CAAP;AACH,CAFD;;AAGA,eAAeA,IAAf","sourcesContent":["import * as React from \"react\";\n\nexport let ContextOne = React.createContext();\n\nexport let initialState = {\n    load: true,\n};\n\nexport let reducer = (state, action) => {\n    switch (action.type) {\n        case \"reset\":\n            return initialState;\n        case \"stop-load\":\n            return { ...state, load: false };\n        case \"start-load\":\n            return { ...state, load: true };\n    }\n};\n\nexport function ContextOneProvider(props) {\n    let [state, dispatch] = React.useReducer(reducer, initialState);\n    let value = { state, dispatch };\n    return (\n        <ContextOne.Provider value={value}>{props.children}</ContextOne.Provider>\n    );\n}\n\nexport let ContextOneConsumer = ContextOne.Consumer;\n\nconst Info = () => {\n    return \"this file found to controller general state\"\n}\nexport default Info;"]},"metadata":{},"sourceType":"module"}