{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Link from 'next/link';\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport { Nav, Collapse } from \"reactstrap\";\nvar ps;\n\nvar Sidebar = function Sidebar(props) {\n  var activeColor = props.activeColor,\n      logo = props.logo,\n      closeSidebar = props.closeSidebar;\n  var logoImg = null;\n  var logoText = null;\n  var sidebar = React.useRef();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebar);\n    }\n\n    var _state = getCollapseStates(props.routes);\n\n    if (state === undefined) setState(_state);\n  });\n\n  var getCollapseStates = function getCollapseStates(routes) {\n    var initialState = {};\n    routes.map(function (prop, key) {\n      if (prop.collapse) {\n        initialState = _objectSpread(_defineProperty({}, prop.state, getCollapseInitialState(prop.views)), getCollapseStates(prop.views), {}, initialState);\n      }\n\n      return null;\n    });\n    return initialState;\n  };\n\n  var getCollapseInitialState = function getCollapseInitialState(routes) {\n    for (var i = 0; i < routes.length; i++) {\n      if (routes[i].collapse && getCollapseInitialState(routes[i].views)) {\n        return true;\n      } else if (window.location.href.indexOf(routes[i].path) !== -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var createLinks = function createLinks(routes) {\n    var rtlActive = props.rtlActive;\n    return routes.map(function (prop, key) {\n      if (prop.redirect) {\n        return null;\n      }\n\n      if (prop.collapse) {\n        var st = {};\n        st[prop[\"state\"]] = !state[prop.state];\n        return __jsx(\"li\", {\n          className: getCollapseInitialState(prop.views) ? \"active\" : \"\",\n          key: key\n        }, __jsx(\"a\", {\n          href: \"#carlos\",\n          \"data-toggle\": \"collapse\",\n          \"aria-expanded\": state[prop.state],\n          onClick: function onClick(e) {\n            e.preventDefault();\n            setState(st);\n          }\n        }, prop.icon !== undefined ? __jsx(React.Fragment, null, __jsx(\"i\", {\n          className: prop.icon\n        }), __jsx(\"p\", null, rtlActive ? prop.rtlName : prop.name, __jsx(\"b\", {\n          className: \"caret\"\n        }))) : __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"sidebar-mini-icon\"\n        }, rtlActive ? prop.rtlMini : prop.mini), __jsx(\"span\", {\n          className: \"sidebar-normal\"\n        }, rtlActive ? prop.rtlName : prop.name, __jsx(\"b\", {\n          className: \"caret\"\n        })))), __jsx(Collapse, {\n          isOpen: state[prop.state]\n        }, __jsx(\"ul\", {\n          className: \"nav\"\n        }, createLinks(prop.views))));\n      }\n\n      return __jsx(\"li\", {\n        className: activeRoute(prop.path),\n        key: key\n      }, __jsx(Link, {\n        href: prop.path\n      }, prop.icon !== undefined ? __jsx(\"a\", {\n        onClick: closeSidebar\n      }, __jsx(\"i\", {\n        className: prop.icon\n      }), __jsx(\"p\", null, rtlActive ? prop.rtlName : prop.name)) : __jsx(React.Fragment, null, __jsx(\"span\", {\n        className: \"sidebar-mini-icon\"\n      }, rtlActive ? prop.rtlMini : prop.mini), __jsx(\"span\", {\n        className: \"sidebar-normal\"\n      }, rtlActive ? prop.rtlName : prop.name))));\n    });\n  };\n\n  var activeRoute = function activeRoute() {};\n\n  React.useEffect(function () {\n    activeRoute = function activeRoute(routeName) {\n      return window.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n    };\n  }, []);\n\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = __jsx(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-mini\",\n        target: \"_blank\",\n        onClick: closeSidebar\n      }, __jsx(\"div\", {\n        className: \"logo-img\"\n      }, __jsx(\"img\", {\n        src: logo.imgSrc,\n        alt: \"react-logo\"\n      })));\n      logoText = __jsx(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-normal\",\n        target: \"_blank\",\n        onClick: closeSidebar\n      }, logo.text);\n    } else {\n      logoImg = __jsx(Link, {\n        href: logo.innerLink\n      }, __jsx(\"a\", {\n        onClick: closeSidebar,\n        className: \"simple-text logo-mini\"\n      }, __jsx(\"div\", {\n        className: \"logo-img\"\n      }, __jsx(\"img\", {\n        src: logo.imgSrc,\n        alt: \"react-logo\"\n      }))));\n      logoText = __jsx(Link, {\n        href: logo.innerLink,\n        className: \"simple-text logo-normal\"\n      }, __jsx(\"a\", {\n        onClick: closeSidebar\n      }, logo.text));\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"sidebar\",\n    data: activeColor\n  }, __jsx(\"div\", {\n    className: \"sidebar-wrapper\",\n    ref: sidebar\n  }, logoImg !== null || logoText !== null ? __jsx(\"div\", {\n    className: \"logo\"\n  }, logoImg, logoText) : null, __jsx(Nav, null, createLinks(props.routes))));\n};\n\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}