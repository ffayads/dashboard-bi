{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport swal from 'sweetalert';\nimport { ContextOne } from '../context/global';\nvar cookies = new Cookies();\nexport var getMap = function getMap(data, dispatch) {\n  return _regeneratorRuntime.async(function getMap$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.post(\"/authAdmin/maps/GetReports\", {\n            \"type_reports_id\": data\n          }).then(function (response) {\n            var data = response.data;\n\n            if (response.status === 200) {\n              return data;\n            } else {\n              swal(\"Alerta!\", response.statusText, \"warning\");\n              return {\n                data: \"\"\n              };\n            }\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getReports = function getReports() {\n  var props,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function getReports$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          props = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"/authAdmin/search/GetReports\", props).then(function (response) {\n            var data = response.data;\n\n            if (response.status === 200) {\n              return data;\n            } else {\n              swal(\"Alerta!\", response.statusText, \"warning\");\n            }\n          }));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar info = function info() {\n  return \"Utils for query get type \";\n};\n\nexport default info;","map":{"version":3,"sources":["/var/www/html/Via-Dashboard/via40-dashboard/Utlis/get.jsx"],"names":["React","axios","Cookies","swal","ContextOne","cookies","getMap","data","dispatch","post","then","response","status","statusText","getReports","props","info"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,IAAMC,OAAO,GAAG,IAAIH,OAAJ,EAAhB;AAEA,OAAO,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAOC,IAAP,EAAaC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACLP,KAAK,CAACQ,IAAN,CAAW,4BAAX,EAAyC;AAClD,+BAAmBF;AAD+B,WAAzC,EAEVG,IAFU,CAEL,UAACC,QAAD,EAAc;AAClB,gBAAIJ,IAAI,GAAGI,QAAQ,CAACJ,IAApB;;AACA,gBAAII,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,qBAAOL,IAAP;AACH,aAFD,MAEO;AACHJ,cAAAA,IAAI,CAAC,SAAD,EAAYQ,QAAQ,CAACE,UAArB,EAAiC,SAAjC,CAAJ;AACA,qBAAO;AAAEN,gBAAAA,IAAI,EAAE;AAAR,eAAP;AACH;AACJ,WAVY,CADK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAcP,OAAO,IAAMO,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,KAAP,8DAAe,EAAf;AAAA;AAAA,2CACTd,KAAK,CAACQ,IAAN,CAAW,8BAAX,EAA2CM,KAA3C,EACXL,IADW,CACN,UAACC,QAAD,EAAc;AACjB,gBAAIJ,IAAI,GAAGI,QAAQ,CAACJ,IAApB;;AACA,gBAAII,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,qBAAOL,IAAP;AACH,aAFD,MAEO;AACHJ,cAAAA,IAAI,CAAC,SAAD,EAAYQ,QAAQ,CAACE,UAArB,EAAiC,SAAjC,CAAJ;AACH;AACJ,WARY,CADS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAYP,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,SAAO,2BAAP;AACH,CAFD;;AAGA,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport swal from 'sweetalert';\nimport { ContextOne } from '../context/global';\nconst cookies = new Cookies();\n\nexport const getMap = async (data, dispatch) => {\n    return await axios.post(\"/authAdmin/maps/GetReports\", {\n        \"type_reports_id\": data\n    }).then((response) => {\n        let data = response.data;\n        if (response.status === 200) {\n            return data;\n        } else {\n            swal(\"Alerta!\", response.statusText, \"warning\")\n            return { data: \"\" };\n        }\n    })\n}\n\nexport const getReports = async (props = {}) => {\n    return await axios.post(\"/authAdmin/search/GetReports\", props\n    ).then((response) => {\n        let data = response.data;\n        if (response.status === 200) {\n            return data;\n        } else {\n            swal(\"Alerta!\", response.statusText, \"warning\")\n        }\n    })\n}\n\nconst info = () => {\n    return \"Utils for query get type \";\n}\nexport default info;"]},"metadata":{},"sourceType":"module"}