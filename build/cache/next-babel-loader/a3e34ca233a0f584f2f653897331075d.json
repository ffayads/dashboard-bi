{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Head from 'next/head';\nimport \"../public/assets/css/nucleo-icons.css\";\nimport \"../public/assets/scss/black-dashboard-pro-react.scss?v=1.0.0\";\nimport \"../public/assets/demo/demo.css\";\nimport Router from 'next/router';\nimport Cookies from 'universal-cookie';\nimport { initialState, reducer, ContextOne } from '../context/global';\nimport axios from 'axios';\nimport NProgress from 'nprogress';\naxios.defaults.baseURL = process.env.apiUrl;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.defaults.headers.get['Content-Type'] = 'application/x-www-form-urlencoded';\nRouter.events.on('routeChangeStart', () => {\n  NProgress.start();\n});\nRouter.events.on('routeChangeComplete', () => {\n  NProgress.done();\n});\nRouter.events.on('routeChangeError', () => {\n  NProgress.done();\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, err => {\n  if (Router.route !== \"/login\" && err.response.status === 401 && err.config && !err.config.__isRetryRequest) {\n    cookies.remove(\"Token\");\n    Router.replace(\"/login\");\n    return err;\n  }\n});\nconst cookies = new Cookies();\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  let [state, dispatch] = React.useReducer(reducer, initialState);\n  let value = {\n    state,\n    dispatch\n  };\n  React.useEffect(() => {\n    validate();\n    return () => {\n      validate();\n    };\n  });\n\n  let validate = () => {\n    let auth = cookies.get(\"Token\");\n    axios.defaults.headers.get['Authorization'] = auth;\n    axios.defaults.headers.post['Authorization'] = auth;\n    document.body.classList.add(\"white-content\");\n\n    if (Router.route !== \"/login\" && (auth === undefined || auth === \"\")) {\n      Router.replace(\"/login\");\n    } else if (Router.route === \"/login\" && auth !== \"\" && auth !== undefined) {\n      Router.replace(\"/dashboard\");\n    }\n  };\n\n  React.useEffect(() => {\n    if (state.load) dispatch({\n      type: \"stop-load\"\n    });\n    return () => {\n      Router.events.off('routeChangeStart', () => {\n        NProgress.start();\n      });\n      Router.events.off('routeChangeComplete', () => {\n        NProgress.done();\n      });\n      Router.events.off('routeChangeError', () => {\n        NProgress.done();\n      });\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Via40 Express\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\"\n  }), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/img/Logo.png\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"/nprogress.css\"\n  })), __jsx(ContextOne.Provider, {\n    value: value\n  }, __jsx(Component, _extends({}, pageProps, value))));\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}