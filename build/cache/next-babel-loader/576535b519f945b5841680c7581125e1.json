{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Card, CardTitle, CardBody, Row, Col, CardHeader, Button, Form } from 'reactstrap';\nimport Maps from '../../components/Maps/map';\nimport { getMap } from '../../Utlis/get';\nimport Modal from '../../components/Modal/modal';\nimport { Marker, InfoWindow } from 'google-maps-react';\n\nconst content = props => {\n  const [data, setData] = React.useState({\n    initialCenter: {\n      lat: 4.3364601,\n      lng: -74.3637772\n    },\n    center: {\n      lat: 4.3364601,\n      lng: -74.3637772\n    },\n    zoom: 11\n  });\n  const [modal, setModal] = React.useState(false);\n  const [modalInfo, setModalInfo] = React.useState(false);\n  const orientation = {\n    0: \" Bogotá - Girardot\",\n    1: \" Girardot - Bogotá\"\n  };\n  React.useEffect(() => {\n    if (data.marks === undefined) {\n      getMap().then(response => {\n        if (response !== undefined) {\n          setData(_objectSpread({}, data, {\n            marks: response.data.reports\n          }));\n        }\n      });\n    }\n  });\n  React.useEffect(() => {\n    if (!modalInfo) setData(_objectSpread({}, data, {\n      zoom: 9,\n      center: {\n        lat: 4.3364601,\n        lng: -74.3637772\n      }\n    }));\n  }, [modalInfo]);\n\n  const onMarkerClick = (props, marker, e) => {\n    setData(_objectSpread({}, data, {\n      dataInfo: props,\n      center: {\n        lat: props.data.Lat,\n        lng: props.data.Lon\n      },\n      zoom: 18\n    }));\n    setModal(false);\n    setModalInfo(true);\n  };\n\n  const getContent = () => {\n    if (data.marks !== undefined) {\n      return data.marks.map((elem, i) => {\n        let options = {\n          weekday: \"long\",\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n          hour12: \"false\"\n        };\n        elem['Date'] = new Date(elem.Time).toLocaleDateString(\"es-CO\", options);\n        elem['Hour'] = new Date(elem.Time).getUTCHours() + \":\" + new Date(elem.Time).getUTCMinutes();\n        return __jsx(Marker, {\n          key: \"mark_\" + i,\n          onClick: onMarkerClick,\n          data: elem,\n          position: {\n            lat: elem.Lat,\n            lng: elem.Lon\n          },\n          className: \"tim-icons icon-alert-circle-exc\",\n          icon: {\n            //url: \"/img/reports/1.jpg\",\n            url: \"/img/reports/\" + elem.TypeReportID + \".jpg\",\n            anchor: {\n              x: 12,\n              y: 12\n            },\n            scaledSize: {\n              width: 30,\n              height: 30,\n              i: undefined,\n              g: undefined\n            }\n          }\n        });\n      });\n    }\n  };\n\n  const getModal = () => {\n    if (modal) {\n      return data.marks.map((elem, i) => {\n        return __jsx(Row, {\n          key: \"row_\" + i\n        }, __jsx(Col, {\n          xs: 6,\n          key: \"head_e_\" + i\n        }, elem.TypeReport), __jsx(Col, {\n          xs: 6,\n          key: \"body_e_\" + i\n        }, __jsx(Button, {\n          key: \"buton_e_\" + i,\n          color: \"info\",\n          className: \"animation-on-hover\",\n          onClick: e => {\n            onMarkerClick({\n              data: elem,\n              position: {\n                lat: elem.Lat,\n                lng: elem.Lon\n              }\n            });\n          }\n        }, \"Ver\")));\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 12\n  }, __jsx(Card, null, __jsx(CardHeader, null, __jsx(Button, {\n    color: \"info\",\n    className: \"animation-on-hover\",\n    onClick: () => {\n      setModal(true);\n    }\n  }, \"Lista Eventos\")), __jsx(CardBody, {\n    id: \"map\",\n    style: {\n      position: \"relative\",\n      overflow: \"hidden\"\n    }\n  }, __jsx(Maps, {\n    initialCenter: data.initialCenter,\n    center: data.center,\n    zoom: data.zoom\n  }, getContent()))))), __jsx(Modal, {\n    modal: modal,\n    setModal: setModal,\n    title: \"Lista de eventos\",\n    key: \"modal_1\"\n  }, getModal()), __jsx(Modal, {\n    modal: modalInfo,\n    setModal: setModalInfo,\n    title: modalInfo ? \"Evento  \" + data.dataInfo.data.TypeReport : \"Evento ...\",\n    Draggable: true,\n    key: \"modal_2\"\n  }, modalInfo ? __jsx(\"div\", null, data.dataInfo.data.Image !== \"\" ? __jsx(\"img\", {\n    src: data.dataInfo.data.Image,\n    alt: \"...\",\n    style: {\n      width: \"100%\"\n    }\n  }) : \"Sin imagen para mostrar.\", __jsx(\"p\", null, __jsx(\"b\", null, \"Fecha: \"), data.dataInfo.data.Date), __jsx(\"p\", null, __jsx(\"b\", null, \"Hora :\"), \" \", data.dataInfo.data.Hour, \" - (24 Horas)\"), __jsx(\"p\", null, __jsx(\"b\", null, \"Sentido :\"), \" \", orientation[data.dataInfo.data.Orientation]), __jsx(\"p\", null, __jsx(\"b\", null, \"Latitud: \"), data.dataInfo.data.Lat, \"  - \", __jsx(\"b\", null, \"Longitud: \"), data.dataInfo.data.Lon)) : __jsx(\"p\", null, \"...\"))));\n};\n\nexport default content;","map":null,"metadata":{},"sourceType":"module"}